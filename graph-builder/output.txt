with recover rules:  {
 "follow": {
  "S_0": [
   "$"
  ],
  "E_0": [
   ")",
   ";"
  ],
  "T1_1": [
   ")",
   ";",
   "+"
  ],
  "F_0": [
   ")",
   ";",
   "+",
   "*"
  ],
  "F_1": [
   "+",
   "*",
   ")",
   ";"
  ],
  "T_0": [
   ")",
   ";",
   "+"
  ],
  "E1_0": [
   ")",
   ";"
  ],
  "T1_0": [
   ")",
   ";",
   "+"
  ],
  "E1_1": [
   ")",
   ";"
  ]
 },
 "terminals": [
  "x",
  "+",
  "*",
  "(",
  ")",
  ";",
  "$"
 ],
 "table": {
  "S_0": {
   "$": null,
   ")": null,
   "(": [
    "E_0",
    "<;>"
   ],
   "+": null,
   "*": null,
   "x": [
    "E_0",
    "<;>"
   ],
   ";": null
  },
  "E_0": {
   "$": null,
   ")": null,
   "(": [
    "T_0",
    "E1_0"
   ],
   "+": null,
   "*": null,
   "x": [
    "T_0",
    "E1_0"
   ],
   ";": null
  },
  "T1_1": {
   "$": null,
   ")": [],
   "(": null,
   "+": [],
   "*": [
    "<*>",
    "F_0",
    "T1_0"
   ],
   "x": null,
   ";": []
  },
  "F_0": {
   "$": null,
   ")": null,
   "(": [
    "F_1"
   ],
   "+": null,
   "*": null,
   "x": [
    "F_1"
   ],
   ";": null
  },
  "F_1": {
   "$": null,
   ")": null,
   "(": [
    "<(>",
    "E_0",
    "<)>"
   ],
   "+": null,
   "*": null,
   "x": [
    "<x>"
   ],
   ";": null
  },
  "T_0": {
   "$": null,
   ")": null,
   "(": [
    "F_0",
    "T1_0"
   ],
   "+": null,
   "*": null,
   "x": [
    "F_0",
    "T1_0"
   ],
   ";": null
  },
  "E1_0": {
   "$": null,
   ")": [
    "E1_1"
   ],
   "(": null,
   "+": [
    "E1_1"
   ],
   "*": null,
   "x": null,
   ";": [
    "E1_1"
   ]
  },
  "T1_0": {
   "$": null,
   ")": [
    "T1_1"
   ],
   "(": null,
   "+": [
    "T1_1"
   ],
   "*": [
    "T1_1"
   ],
   "x": null,
   ";": [
    "T1_1"
   ]
  },
  "E1_1": {
   "$": null,
   ")": [],
   "(": null,
   "+": [
    "<+>",
    "T_0",
    "E1_0"
   ],
   "*": null,
   "x": null,
   ";": []
  },
  "<x>": {
   "x": [
    "x"
   ],
   "+": null,
   "*": null,
   "(": null,
   ")": null,
   ";": null,
   "$": null
  },
  "<+>": {
   "x": null,
   "+": [
    "+"
   ],
   "*": null,
   "(": null,
   ")": null,
   ";": null,
   "$": null
  },
  "<*>": {
   "x": null,
   "+": null,
   "*": [
    "*"
   ],
   "(": null,
   ")": null,
   ";": null,
   "$": null
  },
  "<(>": {
   "x": null,
   "+": null,
   "*": null,
   "(": [
    "("
   ],
   ")": null,
   ";": null,
   "$": null
  },
  "<)>": {
   "x": null,
   "+": null,
   "*": null,
   "(": null,
   ")": [
    ")"
   ],
   ";": null,
   "$": null
  },
  "<;>": {
   "x": null,
   "+": null,
   "*": null,
   "(": null,
   ")": null,
   ";": [
    ";"
   ],
   "$": null
  },
  "<$>": {
   "x": null,
   "+": null,
   "*": null,
   "(": null,
   ")": null,
   ";": null,
   "$": []
  }
 },
 "axiom": "S_0",
 "first": {
  "S_0": [
   "x",
   "("
  ],
  "E_0": [
   "x",
   "("
  ],
  "T1_1": [
   "*",
   "eps"
  ],
  "F_0": [
   "x",
   "("
  ],
  "F_1": [
   "x",
   "("
  ],
  "T_0": [
   "x",
   "("
  ],
  "E1_0": [
   "eps",
   "+"
  ],
  "T1_0": [
   "*",
   "eps"
  ],
  "E1_1": [
   "eps",
   "+"
  ]
 },
 "recover": {
  "S_0": {
   "$": [],
   ")": [
    ")",
    "S_0"
   ],
   "(": null,
   "+": [
    "+",
    "S_0"
   ],
   "*": [
    "*",
    "S_0"
   ],
   "x": null,
   ";": [
    ";",
    "S_0"
   ]
  },
  "E_0": {
   "$": [],
   ")": [],
   "(": null,
   "+": [
    "+",
    "E_0"
   ],
   "*": [
    "*",
    "E_0"
   ],
   "x": null,
   ";": []
  },
  "T1_1": {
   "$": [],
   ")": null,
   "(": [
    "(",
    "T1_1"
   ],
   "+": null,
   "*": null,
   "x": [
    "x",
    "T1_1"
   ],
   ";": null
  },
  "F_0": {
   "$": [],
   ")": [],
   "(": null,
   "+": [],
   "*": [],
   "x": null,
   ";": []
  },
  "F_1": {
   "$": [],
   ")": [],
   "(": null,
   "+": [],
   "*": [],
   "x": null,
   ";": []
  },
  "T_0": {
   "$": [],
   ")": [],
   "(": null,
   "+": [],
   "*": [
    "*",
    "T_0"
   ],
   "x": null,
   ";": []
  },
  "E1_0": {
   "$": [],
   ")": null,
   "(": [
    "(",
    "E1_0"
   ],
   "+": null,
   "*": [
    "*",
    "E1_0"
   ],
   "x": [
    "x",
    "E1_0"
   ],
   ";": null
  },
  "T1_0": {
   "$": [],
   ")": null,
   "(": [
    "(",
    "T1_0"
   ],
   "+": null,
   "*": null,
   "x": [
    "x",
    "T1_0"
   ],
   ";": null
  },
  "E1_1": {
   "$": [],
   ")": null,
   "(": [
    "(",
    "E1_1"
   ],
   "+": null,
   "*": [
    "*",
    "E1_1"
   ],
   "x": [
    "x",
    "E1_1"
   ],
   ";": null
  },
  "<x>": {
   "x": null,
   "+": [
    "+"
   ],
   "*": [
    "*"
   ],
   "(": [
    "("
   ],
   ")": [
    ")"
   ],
   ";": [
    ";"
   ],
   "$": []
  },
  "<+>": {
   "x": [
    "x"
   ],
   "+": null,
   "*": [
    "*"
   ],
   "(": [
    "("
   ],
   ")": [
    ")"
   ],
   ";": [
    ";"
   ],
   "$": []
  },
  "<*>": {
   "x": [
    "x"
   ],
   "+": [
    "+"
   ],
   "*": null,
   "(": [
    "("
   ],
   ")": [
    ")"
   ],
   ";": [
    ";"
   ],
   "$": []
  },
  "<(>": {
   "x": [
    "x"
   ],
   "+": [
    "+"
   ],
   "*": [
    "*"
   ],
   "(": null,
   ")": [
    ")"
   ],
   ";": [
    ";"
   ],
   "$": []
  },
  "<)>": {
   "x": [
    "x"
   ],
   "+": [
    "+"
   ],
   "*": [
    "*"
   ],
   "(": [
    "("
   ],
   ")": null,
   ";": [
    ";"
   ],
   "$": []
  },
  "<;>": {
   "x": [
    "x"
   ],
   "+": [
    "+"
   ],
   "*": [
    "*"
   ],
   "(": [
    "("
   ],
   ")": [
    ")"
   ],
   ";": null,
   "$": []
  },
  "<$>": {
   "x": [
    "x"
   ],
   "+": [
    "+"
   ],
   "*": [
    "*"
   ],
   "(": [
    "("
   ],
   ")": [
    ")"
   ],
   ";": [
    ";"
   ],
   "$": null
  }
 }
}
Создание графа конфигураций...
---------------
 CURRENT NODE: CONFIGURATION: [S_0] from []
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ 'S_0' ] 'x'
[ '<;>', 'E_0' ] 'x'
[ '<;>', 'E1_0', 'T_0' ] 'x'
[ '<;>', 'E1_0', 'T1_0', 'F_0' ] 'x'
[ '<;>', 'E1_0', 'T1_0', 'F_1' ] 'x'
[ '<;>', 'E1_0', 'T1_0', '<x>' ] 'x'
[ '<;>', 'E1_0', 'T1_0', 'x' ] 'x'
IS FINAL NODE:  [ '<;>', 'E1_0', 'T1_0' ]
     res: false
=> CURRENT STACK BY TERMINAL x: <;>,E1_0,T1_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ '<;>', 'E1_0', 'T1_0' ]
>   COMPARE:  [ '<;>', 'E1_0', 'T1_0' ] [ 'S_0' ] 0
>   COMPARE:  [ '<;>', 'E1_0', 'T1_0' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION: [T1_0, E1_0, <;>] from [S_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ 'S_0' ] '+'
[ 'S_0', '+' ] '+'
IS FINAL NODE:  [ 'S_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: S_0
=> ERROR: true
-- CREATED CYCLE: S_0
-- FROM: CONFIGURATION: [S_0] from []
transitions:
-- by "x" to [1 (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [S_0] from []
transitions:
-- by "x" to [1 (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: +
[ 'S_0' ] '*'
[ 'S_0', '*' ] '*'
IS FINAL NODE:  [ 'S_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: S_0
=> ERROR: true
-- CREATED CYCLE: S_0
-- FROM: CONFIGURATION: [S_0] from []
transitions:
-- by "x" to [1 (normal)
-- by "+" to [0 (error)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [S_0] from []
transitions:
-- by "x" to [1 (normal)
-- by "+" to [0 (error)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: *
[ 'S_0' ] '('
[ '<;>', 'E_0' ] '('
[ '<;>', 'E1_0', 'T_0' ] '('
[ '<;>', 'E1_0', 'T1_0', 'F_0' ] '('
[ '<;>', 'E1_0', 'T1_0', 'F_1' ] '('
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0', '<(>' ] '('
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0', '(' ] '('
IS FINAL NODE:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0' ]
     res: false
=> CURRENT STACK BY TERMINAL (: <;>,E1_0,T1_0,<)>,E_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0' ]
>   COMPARE:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0' ] [ 'S_0' ] 0
>   COMPARE:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION: [E_0, <)>, T1_0, E1_0, <;>] from [S_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ 'S_0' ] ')'
[ 'S_0', ')' ] ')'
IS FINAL NODE:  [ 'S_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ): S_0
=> ERROR: true
-- CREATED CYCLE: S_0
-- FROM: CONFIGURATION: [S_0] from []
transitions:
-- by "x" to [1 (normal)
-- by "+" to [0 (error)
-- by "*" to [0 (error)
-- by "(" to [2 (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [S_0] from []
transitions:
-- by "x" to [1 (normal)
-- by "+" to [0 (error)
-- by "*" to [0 (error)
-- by "(" to [2 (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: )
[ 'S_0' ] ';'
[ 'S_0', ';' ] ';'
IS FINAL NODE:  [ 'S_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: S_0
=> ERROR: true
-- CREATED CYCLE: S_0
-- FROM: CONFIGURATION: [S_0] from []
transitions:
-- by "x" to [1 (normal)
-- by "+" to [0 (error)
-- by "*" to [0 (error)
-- by "(" to [2 (normal)
-- by ")" to [0 (error)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [S_0] from []
transitions:
-- by "x" to [1 (normal)
-- by "+" to [0 (error)
-- by "*" to [0 (error)
-- by "(" to [2 (normal)
-- by ")" to [0 (error)
-- by ";" to [null (normal)
-- by terminal: ;
---------------
 CURRENT NODE: CONFIGURATION: [E_0, <)>, T1_0, E1_0, <;>] from [S_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0' ] 'x'
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0' ] 'x'
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0' ] 'x'
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_1' ] 'x'
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<x>' ] 'x'
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'x' ] 'x'
IS FINAL NODE:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ]
     res: false
=> CURRENT STACK BY TERMINAL x: <;>,E1_0,T1_0,<)>,E1_0,T1_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ]
>   COMPARE:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ] [ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0' ] 0
>   COMPARE:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ] [ 'S_0' ] 0
>   COMPARE:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0, <;>] from [E_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0' ] '+'
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0', '+' ] '+'
IS FINAL NODE:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: <;>,E1_0,T1_0,<)>,E_0
=> ERROR: true
-- CREATED CYCLE: <;>,E1_0,T1_0,<)>,E_0
-- FROM: CONFIGURATION: [E_0, <)>, T1_0, E1_0, <;>] from [S_0]
transitions:
-- by "x" to [3 (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [E_0, <)>, T1_0, E1_0, <;>] from [S_0]
transitions:
-- by "x" to [3 (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: +
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0' ] '*'
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0', '*' ] '*'
IS FINAL NODE:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: <;>,E1_0,T1_0,<)>,E_0
=> ERROR: true
-- CREATED CYCLE: <;>,E1_0,T1_0,<)>,E_0
-- FROM: CONFIGURATION: [E_0, <)>, T1_0, E1_0, <;>] from [S_0]
transitions:
-- by "x" to [3 (normal)
-- by "+" to [2 (error)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [E_0, <)>, T1_0, E1_0, <;>] from [S_0]
transitions:
-- by "x" to [3 (normal)
-- by "+" to [2 (error)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: *
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0' ] '('
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0' ] '('
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0' ] '('
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_1' ] '('
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0', '<(>' ] '('
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0', '(' ] '('
IS FINAL NODE:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0' ]
     res: false
=> CURRENT STACK BY TERMINAL (: <;>,E1_0,T1_0,<)>,E1_0,T1_0,<)>,E_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0' ]
>   COMPARE:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0' ] [ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0' ] 4
>   suffix length:  1 4
true
CREATED LET-NODE FOR A|C => A|B|C: <;>,E1_0,T1_0,<)>,E_0 => <;>,E1_0,T1_0,<)>,E1_0,T1_0,<)>,E_0
# REMOVE CONFIGURATION:  ConfigurationNode {
  state: [ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0' ],
  ancestor: 
   ConfigurationNode {
     state: [ 'S_0' ],
     ancestor: 
      ConfigurationNode {
        state: [],
        ancestor: null,
        id: 0,
        level: 0,
        isFinal: false,
        transitions: [Object],
        hasAllTransitions: true },
     id: 0,
     level: 1,
     isFinal: false,
     transitions: 
      { x: [Object],
        '+': [Object],
        '*': [Object],
        '(': [Object],
        ')': [Object],
        ';': [Object] },
     hasAllTransitions: true },
  id: 2,
  level: 2,
  isFinal: false,
  transitions: 
   { x: Transition { term: 'x', toEqualState: false, node: [Object], error: false },
     '+': Transition { term: '+', toEqualState: true, node: [Circular], error: true },
     '*': Transition { term: '*', toEqualState: true, node: [Circular], error: true },
     '(': Transition { term: '(', toEqualState: false, node: null, error: false },
     ')': Transition { term: ')', toEqualState: false, node: null, error: false },
     ';': Transition { term: ';', toEqualState: false, node: null, error: false } },
  hasAllTransitions: true }
remove config:  2
remove config:  3
---------------
 CURRENT NODE: LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
---------------
 CURRENT NODE: CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ '<;>' ] 'x'
[ 'x' ] 'x'
=> CURRENT STACK BY TERMINAL x: 
=> ERROR: true
> CHECK TURCHIN RELATION FOR:  []
true
ADD NEW CONFIGURATION:  CONFIGURATION: [] from [<;>]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ '<;>' ] '+'
[ '+' ] '+'
=> CURRENT STACK BY TERMINAL +: 
=> ERROR: true
-- CREATED CYCLE: 
-- FROM: CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [] from [<;>]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: +
[ '<;>' ] '*'
[ '*' ] '*'
=> CURRENT STACK BY TERMINAL *: 
=> ERROR: true
-- CREATED CYCLE: 
-- FROM: CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [7 (error)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [] from [<;>]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: *
[ '<;>' ] '('
[ '(' ] '('
=> CURRENT STACK BY TERMINAL (: 
=> ERROR: true
-- CREATED CYCLE: 
-- FROM: CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [7 (error)
-- by "*" to [7 (error)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [] from [<;>]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: (
[ '<;>' ] ')'
[ ')' ] ')'
=> CURRENT STACK BY TERMINAL ): 
=> ERROR: true
-- CREATED CYCLE: 
-- FROM: CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [7 (error)
-- by "*" to [7 (error)
-- by "(" to [7 (error)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [] from [<;>]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: )
[ '<;>' ] ';'
[ ';' ] ';'
=> CURRENT STACK BY TERMINAL ;: 
=> ERROR: false
-- CREATED CYCLE: 
-- FROM: CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [7 (error)
-- by "*" to [7 (error)
-- by "(" to [7 (error)
-- by ")" to [7 (error)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [] from [<;>]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: ;
---------------
 CURRENT NODE: CONFIGURATION: [] from [<;>]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
---------------
 CURRENT NODE: CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ 'E1_0', 'T1_0', '<)>', 'E_0' ] 'x'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0' ] 'x'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0' ] 'x'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_1' ] 'x'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<x>' ] 'x'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'x' ] 'x'
IS FINAL NODE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ]
     res: false
=> CURRENT STACK BY TERMINAL x: E1_0,T1_0,<)>,E1_0,T1_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ]
>   COMPARE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ] [ 'E1_0', 'T1_0', '<)>', 'E_0' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ 'E1_0', 'T1_0', '<)>', 'E_0' ] '+'
[ 'E1_0', 'T1_0', '<)>', 'E_0', '+' ] '+'
IS FINAL NODE:  [ 'E1_0', 'T1_0', '<)>', 'E_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: E1_0,T1_0,<)>,E_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0,<)>,E_0
-- FROM: CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: +
[ 'E1_0', 'T1_0', '<)>', 'E_0' ] '*'
[ 'E1_0', 'T1_0', '<)>', 'E_0', '*' ] '*'
IS FINAL NODE:  [ 'E1_0', 'T1_0', '<)>', 'E_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: E1_0,T1_0,<)>,E_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0,<)>,E_0
-- FROM: CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: *
[ 'E1_0', 'T1_0', '<)>', 'E_0' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_1' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0', '<(>' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0', '(' ] '('
IS FINAL NODE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0' ]
     res: false
=> CURRENT STACK BY TERMINAL (: E1_0,T1_0,<)>,E1_0,T1_0,<)>,E_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0' ]
>   COMPARE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0' ] [ 'E1_0', 'T1_0', '<)>', 'E_0' ] 4
true
CREATED LET-NODE FOR A => A|B: E1_0,T1_0,<)>,E_0 => E1_0,T1_0,<)>,E1_0,T1_0,<)>,E_0
-- created new let-node and config
-- from E1_0,T1_0,<)>,E_0 by (
[ 'E1_0', 'T1_0', '<)>', 'E_0' ] ')'
[ 'E1_0', 'T1_0', '<)>' ] ')'
[ 'E1_0', 'T1_0', ')' ] ')'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL ): E1_0,T1_0
=> ERROR: true
> CHECK TURCHIN RELATION FOR:  [ 'E1_0', 'T1_0' ]
true
ADD NEW CONFIGURATION:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ 'E1_0', 'T1_0', '<)>', 'E_0' ] ';'
[ 'E1_0', 'T1_0', '<)>' ] ';'
[ 'E1_0', 'T1_0', ';' ] ';'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL ;: E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: ;
---------------
 CURRENT NODE: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ 'E1_0', 'T1_0' ] 'x'
[ 'E1_0', 'T1_0', 'x' ] 'x'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL x: E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: x
[ 'E1_0', 'T1_0' ] '+'
[ 'E1_0', 'T1_1' ] '+'
[ 'E1_0' ] '+'
[ 'E1_1' ] '+'
[ 'E1_0', 'T_0', '<+>' ] '+'
[ 'E1_0', 'T_0', '+' ] '+'
IS FINAL NODE:  [ 'E1_0', 'T_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: E1_0,T_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'E1_0', 'T_0' ]
true
ADD NEW CONFIGURATION:  CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ 'E1_0', 'T1_0' ] '*'
[ 'E1_0', 'T1_1' ] '*'
[ 'E1_0', 'T1_0', 'F_0', '<*>' ] '*'
[ 'E1_0', 'T1_0', 'F_0', '*' ] '*'
IS FINAL NODE:  [ 'E1_0', 'T1_0', 'F_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: E1_0,T1_0,F_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'E1_0', 'T1_0', 'F_0' ]
>   COMPARE:  [ 'E1_0', 'T1_0', 'F_0' ] [ 'E1_0', 'T1_0' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION: [F_0, T1_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ 'E1_0', 'T1_0' ] '('
[ 'E1_0', 'T1_0', '(' ] '('
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL (: E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: (
[ 'E1_0', 'T1_0' ] ')'
[ 'E1_0', 'T1_1' ] ')'
[ 'E1_0' ] ')'
[ 'E1_1' ] ')'
[ 'E1_0', 'T1_0' ] ';'
[ 'E1_0', 'T1_1' ] ';'
[ 'E1_0' ] ';'
[ 'E1_1' ] ';'
---------------
 CURRENT NODE: CONFIGURATION: [F_0, T1_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ 'E1_0', 'T1_0', 'F_0' ] 'x'
[ 'E1_0', 'T1_0', 'F_1' ] 'x'
[ 'E1_0', 'T1_0', '<x>' ] 'x'
[ 'E1_0', 'T1_0', 'x' ] 'x'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL x: E1_0,T1_0
=> ERROR: false
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [F_0, T1_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by terminal: x
[ 'E1_0', 'T1_0', 'F_0' ] '+'
[ 'E1_0', 'T1_0' ] '+'
[ 'E1_0', 'T1_1' ] '+'
[ 'E1_0' ] '+'
[ 'E1_1' ] '+'
[ 'E1_0', 'T_0', '<+>' ] '+'
[ 'E1_0', 'T_0', '+' ] '+'
IS FINAL NODE:  [ 'E1_0', 'T_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: E1_0,T_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T_0
-- FROM: CONFIGURATION: [F_0, T1_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: +
[ 'E1_0', 'T1_0', 'F_0' ] '*'
[ 'E1_0', 'T1_0' ] '*'
[ 'E1_0', 'T1_1' ] '*'
[ 'E1_0', 'T1_0', 'F_0', '<*>' ] '*'
[ 'E1_0', 'T1_0', 'F_0', '*' ] '*'
IS FINAL NODE:  [ 'E1_0', 'T1_0', 'F_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: E1_0,T1_0,F_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0,F_0
-- FROM: CONFIGURATION: [F_0, T1_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [F_0, T1_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: *
[ 'E1_0', 'T1_0', 'F_0' ] '('
[ 'E1_0', 'T1_0', 'F_1' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E_0', '<(>' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E_0', '(' ] '('
IS FINAL NODE:  [ 'E1_0', 'T1_0', '<)>', 'E_0' ]
     res: false
=> CURRENT STACK BY TERMINAL (: E1_0,T1_0,<)>,E_0
=> ERROR: false
-- CREATED CYCLE: E1_0,T1_0,<)>,E_0
-- FROM: CONFIGURATION: [F_0, T1_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [13 (error)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
-- by terminal: (
[ 'E1_0', 'T1_0', 'F_0' ] ')'
[ 'E1_0', 'T1_0' ] ')'
[ 'E1_0', 'T1_1' ] ')'
[ 'E1_0' ] ')'
[ 'E1_1' ] ')'
[ 'E1_0', 'T1_0', 'F_0' ] ';'
[ 'E1_0', 'T1_0' ] ';'
[ 'E1_0', 'T1_1' ] ';'
[ 'E1_0' ] ';'
[ 'E1_1' ] ';'
---------------
 CURRENT NODE: CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ 'E1_0', 'T_0' ] 'x'
[ 'E1_0', 'T1_0', 'F_0' ] 'x'
[ 'E1_0', 'T1_0', 'F_1' ] 'x'
[ 'E1_0', 'T1_0', '<x>' ] 'x'
[ 'E1_0', 'T1_0', 'x' ] 'x'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL x: E1_0,T1_0
=> ERROR: false
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by terminal: x
[ 'E1_0', 'T_0' ] '+'
[ 'E1_0' ] '+'
[ 'E1_1' ] '+'
[ 'E1_0', 'T_0', '<+>' ] '+'
[ 'E1_0', 'T_0', '+' ] '+'
IS FINAL NODE:  [ 'E1_0', 'T_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: E1_0,T_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T_0
-- FROM: CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: +
[ 'E1_0', 'T_0' ] '*'
[ 'E1_0', 'T_0', '*' ] '*'
IS FINAL NODE:  [ 'E1_0', 'T_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: E1_0,T_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T_0
-- FROM: CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: *
[ 'E1_0', 'T_0' ] '('
[ 'E1_0', 'T1_0', 'F_0' ] '('
[ 'E1_0', 'T1_0', 'F_1' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E_0', '<(>' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E_0', '(' ] '('
IS FINAL NODE:  [ 'E1_0', 'T1_0', '<)>', 'E_0' ]
     res: false
=> CURRENT STACK BY TERMINAL (: E1_0,T1_0,<)>,E_0
=> ERROR: false
-- CREATED CYCLE: E1_0,T1_0,<)>,E_0
-- FROM: CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [12 (error)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
-- by terminal: (
[ 'E1_0', 'T_0' ] ')'
[ 'E1_0' ] ')'
[ 'E1_1' ] ')'
[ 'E1_0', 'T_0' ] ';'
[ 'E1_0' ] ';'
[ 'E1_1' ] ';'
---------------
 CURRENT NODE: LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
---------------
 CURRENT NODE: CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ 'E1_0', 'T1_0', '<)>' ] 'x'
[ 'E1_0', 'T1_0', 'x' ] 'x'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL x: E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by terminal: x
[ 'E1_0', 'T1_0', '<)>' ] '+'
[ 'E1_0', 'T1_0', '+' ] '+'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL +: E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by terminal: +
[ 'E1_0', 'T1_0', '<)>' ] '*'
[ 'E1_0', 'T1_0', '*' ] '*'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL *: E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by terminal: *
[ 'E1_0', 'T1_0', '<)>' ] '('
[ 'E1_0', 'T1_0', '(' ] '('
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL (: E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by terminal: (
[ 'E1_0', 'T1_0', '<)>' ] ')'
[ 'E1_0', 'T1_0', ')' ] ')'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL ): E1_0,T1_0
=> ERROR: false
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by terminal: )
[ 'E1_0', 'T1_0', '<)>' ] ';'
[ 'E1_0', 'T1_0', ';' ] ';'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL ;: E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by terminal: ;
---------------
 CURRENT NODE: CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ] 'x'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'x' ] 'x'
IS FINAL NODE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ]
     res: false
=> CURRENT STACK BY TERMINAL x: E1_0,T1_0,<)>,E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0,<)>,E1_0,T1_0
-- FROM: CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: x
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ] '+'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_1' ] '+'
[ 'E1_0', 'T1_0', '<)>', 'E1_0' ] '+'
[ 'E1_0', 'T1_0', '<)>', 'E1_1' ] '+'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0', '<+>' ] '+'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0', '+' ] '+'
IS FINAL NODE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: E1_0,T1_0,<)>,E1_0,T_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0' ]
>   COMPARE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0' ] [ 'E1_0', 'T1_0', '<)>', 'E_0' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ] '*'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_1' ] '*'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0', '<*>' ] '*'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0', '*' ] '*'
IS FINAL NODE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: E1_0,T1_0,<)>,E1_0,T1_0,F_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0' ]
>   COMPARE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0' ] [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ] 0
>   COMPARE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0' ] [ 'E1_0', 'T1_0', '<)>', 'E_0' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '(' ] '('
IS FINAL NODE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ]
     res: false
=> CURRENT STACK BY TERMINAL (: E1_0,T1_0,<)>,E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0,<)>,E1_0,T1_0
-- FROM: CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: (
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ] ')'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_1' ] ')'
[ 'E1_0', 'T1_0', '<)>', 'E1_0' ] ')'
[ 'E1_0', 'T1_0', '<)>', 'E1_1' ] ')'
[ 'E1_0', 'T1_0', '<)>' ] ')'
[ 'E1_0', 'T1_0', ')' ] ')'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL ): E1_0,T1_0
=> ERROR: false
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by terminal: )
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ] ';'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_1' ] ';'
[ 'E1_0', 'T1_0', '<)>', 'E1_0' ] ';'
[ 'E1_0', 'T1_0', '<)>', 'E1_1' ] ';'
[ 'E1_0', 'T1_0', '<)>' ] ';'
[ 'E1_0', 'T1_0', ';' ] ';'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL ;: E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by terminal: ;
---------------
 CURRENT NODE: CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0' ] 'x'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_1' ] 'x'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<x>' ] 'x'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'x' ] 'x'
IS FINAL NODE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ]
     res: false
=> CURRENT STACK BY TERMINAL x: E1_0,T1_0,<)>,E1_0,T1_0
=> ERROR: false
-- CREATED CYCLE: E1_0,T1_0,<)>,E1_0,T1_0
-- FROM: CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
-- by terminal: x
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0' ] '+'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ] '+'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_1' ] '+'
[ 'E1_0', 'T1_0', '<)>', 'E1_0' ] '+'
[ 'E1_0', 'T1_0', '<)>', 'E1_1' ] '+'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0', '<+>' ] '+'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0', '+' ] '+'
IS FINAL NODE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: E1_0,T1_0,<)>,E1_0,T_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0,<)>,E1_0,T_0
-- FROM: CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: +
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0' ] '*'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ] '*'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_1' ] '*'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0', '<*>' ] '*'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0', '*' ] '*'
IS FINAL NODE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: E1_0,T1_0,<)>,E1_0,T1_0,F_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0,<)>,E1_0,T1_0,F_0
-- FROM: CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: *
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_1' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0', '<(>' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0', '(' ] '('
IS FINAL NODE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0' ]
     res: false
=> CURRENT STACK BY TERMINAL (: E1_0,T1_0,<)>,E1_0,T1_0,<)>,E_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0' ]
>   COMPARE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0' ] [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0' ] 0
>   COMPARE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0' ] [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ] 0
>   COMPARE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0' ] [ 'E1_0', 'T1_0', '<)>', 'E_0' ] 4
true
CREATED LET-NODE FOR A => A|B: E1_0,T1_0,<)>,E_0 => E1_0,T1_0,<)>,E1_0,T1_0,<)>,E_0
-- equal conf found
-- equal let-node found
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0' ] ')'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ] ')'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_1' ] ')'
[ 'E1_0', 'T1_0', '<)>', 'E1_0' ] ')'
[ 'E1_0', 'T1_0', '<)>', 'E1_1' ] ')'
[ 'E1_0', 'T1_0', '<)>' ] ')'
[ 'E1_0', 'T1_0', ')' ] ')'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL ): E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [15 (error)
-- by "(" to [9 (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by terminal: )
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0' ] ';'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ] ';'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_1' ] ';'
[ 'E1_0', 'T1_0', '<)>', 'E1_0' ] ';'
[ 'E1_0', 'T1_0', '<)>', 'E1_1' ] ';'
[ 'E1_0', 'T1_0', '<)>' ] ';'
[ 'E1_0', 'T1_0', ';' ] ';'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL ;: E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [15 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by terminal: ;
---------------
 CURRENT NODE: CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0' ] 'x'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0' ] 'x'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_1' ] 'x'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<x>' ] 'x'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'x' ] 'x'
IS FINAL NODE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ]
     res: false
=> CURRENT STACK BY TERMINAL x: E1_0,T1_0,<)>,E1_0,T1_0
=> ERROR: false
-- CREATED CYCLE: E1_0,T1_0,<)>,E1_0,T1_0
-- FROM: CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
-- by terminal: x
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0' ] '+'
[ 'E1_0', 'T1_0', '<)>', 'E1_0' ] '+'
[ 'E1_0', 'T1_0', '<)>', 'E1_1' ] '+'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0', '<+>' ] '+'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0', '+' ] '+'
IS FINAL NODE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: E1_0,T1_0,<)>,E1_0,T_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0,<)>,E1_0,T_0
-- FROM: CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: +
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0' ] '*'
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0', '*' ] '*'
IS FINAL NODE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: E1_0,T1_0,<)>,E1_0,T_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0,<)>,E1_0,T_0
-- FROM: CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: *
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_1' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0', '<(>' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0', '(' ] '('
IS FINAL NODE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0' ]
     res: false
=> CURRENT STACK BY TERMINAL (: E1_0,T1_0,<)>,E1_0,T1_0,<)>,E_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0' ]
>   COMPARE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0' ] [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0' ] 0
>   COMPARE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0' ] [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ] 0
>   COMPARE:  [ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<)>', 'E_0' ] [ 'E1_0', 'T1_0', '<)>', 'E_0' ] 4
true
CREATED LET-NODE FOR A => A|B: E1_0,T1_0,<)>,E_0 => E1_0,T1_0,<)>,E1_0,T1_0,<)>,E_0
-- equal conf found
-- equal let-node found
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0' ] ')'
[ 'E1_0', 'T1_0', '<)>', 'E1_0' ] ')'
[ 'E1_0', 'T1_0', '<)>', 'E1_1' ] ')'
[ 'E1_0', 'T1_0', '<)>' ] ')'
[ 'E1_0', 'T1_0', ')' ] ')'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL ): E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [14 (error)
-- by "(" to [9 (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by terminal: )
[ 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0' ] ';'
[ 'E1_0', 'T1_0', '<)>', 'E1_0' ] ';'
[ 'E1_0', 'T1_0', '<)>', 'E1_1' ] ';'
[ 'E1_0', 'T1_0', '<)>' ] ';'
[ 'E1_0', 'T1_0', ';' ] ';'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL ;: E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [14 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by terminal: ;
---------------
 CURRENT NODE: CONFIGURATION: [T1_0, E1_0, <;>] from [S_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ '<;>', 'E1_0', 'T1_0' ] 'x'
[ '<;>', 'E1_0', 'T1_0', 'x' ] 'x'
IS FINAL NODE:  [ '<;>', 'E1_0', 'T1_0' ]
     res: false
=> CURRENT STACK BY TERMINAL x: <;>,E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: <;>,E1_0,T1_0
-- FROM: CONFIGURATION: [T1_0, E1_0, <;>] from [S_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0, <;>] from [S_0]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: x
[ '<;>', 'E1_0', 'T1_0' ] '+'
[ '<;>', 'E1_0', 'T1_1' ] '+'
[ '<;>', 'E1_0' ] '+'
[ '<;>', 'E1_1' ] '+'
[ '<;>', 'E1_0', 'T_0', '<+>' ] '+'
[ '<;>', 'E1_0', 'T_0', '+' ] '+'
IS FINAL NODE:  [ '<;>', 'E1_0', 'T_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: <;>,E1_0,T_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ '<;>', 'E1_0', 'T_0' ]
>   COMPARE:  [ '<;>', 'E1_0', 'T_0' ] [ 'S_0' ] 0
>   COMPARE:  [ '<;>', 'E1_0', 'T_0' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION: [T_0, E1_0, <;>] from [T1_0, E1_0, <;>]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ '<;>', 'E1_0', 'T1_0' ] '*'
[ '<;>', 'E1_0', 'T1_1' ] '*'
[ '<;>', 'E1_0', 'T1_0', 'F_0', '<*>' ] '*'
[ '<;>', 'E1_0', 'T1_0', 'F_0', '*' ] '*'
IS FINAL NODE:  [ '<;>', 'E1_0', 'T1_0', 'F_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: <;>,E1_0,T1_0,F_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ '<;>', 'E1_0', 'T1_0', 'F_0' ]
>   COMPARE:  [ '<;>', 'E1_0', 'T1_0', 'F_0' ] [ '<;>', 'E1_0', 'T1_0' ] 0
>   COMPARE:  [ '<;>', 'E1_0', 'T1_0', 'F_0' ] [ 'S_0' ] 0
>   COMPARE:  [ '<;>', 'E1_0', 'T1_0', 'F_0' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION: [F_0, T1_0, E1_0, <;>] from [T1_0, E1_0, <;>]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ '<;>', 'E1_0', 'T1_0' ] '('
[ '<;>', 'E1_0', 'T1_0', '(' ] '('
IS FINAL NODE:  [ '<;>', 'E1_0', 'T1_0' ]
     res: false
=> CURRENT STACK BY TERMINAL (: <;>,E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: <;>,E1_0,T1_0
-- FROM: CONFIGURATION: [T1_0, E1_0, <;>] from [S_0]
transitions:
-- by "x" to [1 (error)
-- by "+" to [18 (normal)
-- by "*" to [19 (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0, <;>] from [S_0]
transitions:
-- by "x" to [1 (error)
-- by "+" to [18 (normal)
-- by "*" to [19 (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: (
[ '<;>', 'E1_0', 'T1_0' ] ')'
[ '<;>', 'E1_0', 'T1_1' ] ')'
[ '<;>', 'E1_0' ] ')'
[ '<;>', 'E1_1' ] ')'
[ '<;>' ] ')'
[ ')' ] ')'
=> CURRENT STACK BY TERMINAL ): 
=> ERROR: true
-- CREATED CYCLE: 
-- FROM: CONFIGURATION: [T1_0, E1_0, <;>] from [S_0]
transitions:
-- by "x" to [1 (error)
-- by "+" to [18 (normal)
-- by "*" to [19 (normal)
-- by "(" to [1 (error)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [] from [<;>]
transitions:

-- by terminal: )
[ '<;>', 'E1_0', 'T1_0' ] ';'
[ '<;>', 'E1_0', 'T1_1' ] ';'
[ '<;>', 'E1_0' ] ';'
[ '<;>', 'E1_1' ] ';'
[ '<;>' ] ';'
[ ';' ] ';'
=> CURRENT STACK BY TERMINAL ;: 
=> ERROR: false
-- CREATED CYCLE: 
-- FROM: CONFIGURATION: [T1_0, E1_0, <;>] from [S_0]
transitions:
-- by "x" to [1 (error)
-- by "+" to [18 (normal)
-- by "*" to [19 (normal)
-- by "(" to [1 (error)
-- by ")" to [7 (error)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [] from [<;>]
transitions:

-- by terminal: ;
---------------
 CURRENT NODE: CONFIGURATION: [F_0, T1_0, E1_0, <;>] from [T1_0, E1_0, <;>]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ '<;>', 'E1_0', 'T1_0', 'F_0' ] 'x'
[ '<;>', 'E1_0', 'T1_0', 'F_1' ] 'x'
[ '<;>', 'E1_0', 'T1_0', '<x>' ] 'x'
[ '<;>', 'E1_0', 'T1_0', 'x' ] 'x'
IS FINAL NODE:  [ '<;>', 'E1_0', 'T1_0' ]
     res: false
=> CURRENT STACK BY TERMINAL x: <;>,E1_0,T1_0
=> ERROR: false
-- CREATED CYCLE: <;>,E1_0,T1_0
-- FROM: CONFIGURATION: [F_0, T1_0, E1_0, <;>] from [T1_0, E1_0, <;>]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T1_0, E1_0, <;>] from [S_0]
transitions:
-- by "x" to [1 (error)
-- by "+" to [18 (normal)
-- by "*" to [19 (normal)
-- by "(" to [1 (error)
-- by ")" to [7 (error)
-- by ";" to [7 (normal)
-- by terminal: x
[ '<;>', 'E1_0', 'T1_0', 'F_0' ] '+'
[ '<;>', 'E1_0', 'T1_0' ] '+'
[ '<;>', 'E1_0', 'T1_1' ] '+'
[ '<;>', 'E1_0' ] '+'
[ '<;>', 'E1_1' ] '+'
[ '<;>', 'E1_0', 'T_0', '<+>' ] '+'
[ '<;>', 'E1_0', 'T_0', '+' ] '+'
IS FINAL NODE:  [ '<;>', 'E1_0', 'T_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: <;>,E1_0,T_0
=> ERROR: true
-- CREATED CYCLE: <;>,E1_0,T_0
-- FROM: CONFIGURATION: [F_0, T1_0, E1_0, <;>] from [T1_0, E1_0, <;>]
transitions:
-- by "x" to [1 (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [T_0, E1_0, <;>] from [T1_0, E1_0, <;>]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: +
[ '<;>', 'E1_0', 'T1_0', 'F_0' ] '*'
[ '<;>', 'E1_0', 'T1_0' ] '*'
[ '<;>', 'E1_0', 'T1_1' ] '*'
[ '<;>', 'E1_0', 'T1_0', 'F_0', '<*>' ] '*'
[ '<;>', 'E1_0', 'T1_0', 'F_0', '*' ] '*'
IS FINAL NODE:  [ '<;>', 'E1_0', 'T1_0', 'F_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: <;>,E1_0,T1_0,F_0
=> ERROR: true
-- CREATED CYCLE: <;>,E1_0,T1_0,F_0
-- FROM: CONFIGURATION: [F_0, T1_0, E1_0, <;>] from [T1_0, E1_0, <;>]
transitions:
-- by "x" to [1 (normal)
-- by "+" to [18 (error)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [F_0, T1_0, E1_0, <;>] from [T1_0, E1_0, <;>]
transitions:
-- by "x" to [1 (normal)
-- by "+" to [18 (error)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- by terminal: *
[ '<;>', 'E1_0', 'T1_0', 'F_0' ] '('
[ '<;>', 'E1_0', 'T1_0', 'F_1' ] '('
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0', '<(>' ] '('
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0', '(' ] '('
IS FINAL NODE:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0' ]
     res: false
=> CURRENT STACK BY TERMINAL (: <;>,E1_0,T1_0,<)>,E_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0' ]
>   COMPARE:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0' ] [ '<;>', 'E1_0', 'T1_0', 'F_0' ] 0
>   COMPARE:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0' ] [ '<;>', 'E1_0', 'T1_0' ] 0
>   COMPARE:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0' ] [ 'S_0' ] 0
>   COMPARE:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION: [E_0, <)>, T1_0, E1_0, <;>] from [F_0, T1_0, E1_0, <;>]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ '<;>', 'E1_0', 'T1_0', 'F_0' ] ')'
[ '<;>', 'E1_0', 'T1_0' ] ')'
[ '<;>', 'E1_0', 'T1_1' ] ')'
[ '<;>', 'E1_0' ] ')'
[ '<;>', 'E1_1' ] ')'
[ '<;>' ] ')'
[ ')' ] ')'
=> CURRENT STACK BY TERMINAL ): 
=> ERROR: true
-- CREATED CYCLE: 
-- FROM: CONFIGURATION: [F_0, T1_0, E1_0, <;>] from [T1_0, E1_0, <;>]
transitions:
-- by "x" to [1 (normal)
-- by "+" to [18 (error)
-- by "*" to [19 (error)
-- by "(" to [20 (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [] from [<;>]
transitions:

-- by terminal: )
[ '<;>', 'E1_0', 'T1_0', 'F_0' ] ';'
[ '<;>', 'E1_0', 'T1_0' ] ';'
[ '<;>', 'E1_0', 'T1_1' ] ';'
[ '<;>', 'E1_0' ] ';'
[ '<;>', 'E1_1' ] ';'
[ '<;>' ] ';'
[ ';' ] ';'
=> CURRENT STACK BY TERMINAL ;: 
=> ERROR: true
-- CREATED CYCLE: 
-- FROM: CONFIGURATION: [F_0, T1_0, E1_0, <;>] from [T1_0, E1_0, <;>]
transitions:
-- by "x" to [1 (normal)
-- by "+" to [18 (error)
-- by "*" to [19 (error)
-- by "(" to [20 (normal)
-- by ")" to [7 (error)
-- by ";" to [null (normal)
-- TO: CONFIGURATION: [] from [<;>]
transitions:

-- by terminal: ;
---------------
 CURRENT NODE: CONFIGURATION: [E_0, <)>, T1_0, E1_0, <;>] from [F_0, T1_0, E1_0, <;>]
transitions:
-- by "x" to [null (normal)
-- by "+" to [null (normal)
-- by "*" to [null (normal)
-- by "(" to [null (normal)
-- by ")" to [null (normal)
-- by ";" to [null (normal)
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0' ] 'x'
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T_0' ] 'x'
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_0' ] 'x'
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'F_1' ] 'x'
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', '<x>' ] 'x'
[ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0', 'x' ] 'x'
IS FINAL NODE:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ]
     res: false
=> CURRENT STACK BY TERMINAL x: <;>,E1_0,T1_0,<)>,E1_0,T1_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ]
>   COMPARE:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ] [ '<;>', 'E1_0', 'T1_0', '<)>', 'E_0' ] 0
>   COMPARE:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ] [ '<;>', 'E1_0', 'T1_0', 'F_0' ] 0
>   COMPARE:  [ '<;>', 'E1_0', 'T1_0', '<)>', 'E1_0', 'T1_0' ] [ '<;>', 'E1_0', 'T1_0' ] 2
>   suffix length:  1 2
true
CREATED LET-NODE FOR A|C => A|B|C: <;>,E1_0,T1_0 => <;>,E1_0,T1_0,<)>,E1_0,T1_0
# REMOVE CONFIGURATION:  ConfigurationNode {
  state: [ '<;>', 'E1_0', 'T1_0' ],
  ancestor: 
   ConfigurationNode {
     state: [ 'S_0' ],
     ancestor: 
      ConfigurationNode {
        state: [],
        ancestor: null,
        id: 0,
        level: 0,
        isFinal: false,
        transitions: [Object],
        hasAllTransitions: true },
     id: 0,
     level: 1,
     isFinal: false,
     transitions: 
      { x: [Object],
        '+': [Object],
        '*': [Object],
        '(': [Object],
        ')': [Object],
        ';': [Object] },
     hasAllTransitions: true },
  id: 1,
  level: 2,
  isFinal: false,
  transitions: 
   { x: Transition { term: 'x', toEqualState: true, node: [Circular], error: true },
     '+': Transition { term: '+', toEqualState: false, node: [Object], error: false },
     '*': Transition { term: '*', toEqualState: false, node: [Object], error: false },
     '(': Transition { term: '(', toEqualState: true, node: [Circular], error: true },
     ')': Transition { term: ')', toEqualState: true, node: [Object], error: true },
     ';': Transition { term: ';', toEqualState: true, node: [Object], error: false } },
  hasAllTransitions: true }
remove config:  1
remove config:  18
remove config:  19
remove config:  20
---------------
 CURRENT NODE: LET NODE for:
CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [7 (error)
-- by "*" to [7 (error)
-- by "(" to [7 (error)
-- by ")" to [7 (error)
-- by ";" to [7 (normal)
digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [S_0]"];
5 [label="5 - [E_0,<)>,T1_0,E1_0]"];
6 [label="6 - [<;>]"];
8 [label="8 - [T1_0,E1_0,<)>,T1_0,E1_0]"];
10 [label="10 - [<)>,T1_0,E1_0]"];
12 [label="12 - [T_0,E1_0]"];
13 [label="13 - [F_0,T1_0,E1_0]"];
14 [label="14 - [T_0,E1_0,<)>,T1_0,E1_0]"];
15 [label="15 - [F_0,T1_0,E1_0,<)>,T1_0,E1_0]"];
node [shape = square];
4 [label="let: [E_0,<)>,T1_0,E1_0,<)>,T1_0,E1_0,<;>]"];
9 [label="let: [E_0,<)>,T1_0,E1_0,<)>,T1_0,E1_0]"];
21 [label="let: [T1_0,E1_0,<)>,T1_0,E1_0,<;>]"];
node [shape = doublecircle];
7 [label="7 - []"];
11 [label="11 - [T1_0,E1_0]"];
0 -> 21 [ label = "x", color = "black" ];
0 -> 4 [ label = "(", color = "black" ];
5 -> 8 [ label = "x", color = "black" ];
5 -> 9 [ label = "(", color = "black" ];
6 -> 7 [ label = ";", color = "black" ];
4 -> 5 [label="up"];
4 -> 6 [style=dotted, label="down"];
8 -> 14 [ label = "+", color = "black" ];
8 -> 15 [ label = "*", color = "black" ];
8 -> 11 [ label = ")", color = "black" ];
10 -> 11 [ label = ")", color = "black" ];
9 -> 5 [label="up"];
9 -> 10 [style=dotted, label="down"];
11 -> 12 [ label = "+", color = "black" ];
11 -> 13 [ label = "*", color = "black" ];
12 -> 11 [ label = "x", color = "black" ];
12 -> 5 [ label = "(", color = "black" ];
13 -> 11 [ label = "x", color = "black" ];
13 -> 5 [ label = "(", color = "black" ];
14 -> 8 [ label = "x", color = "black" ];
14 -> 9 [ label = "(", color = "black" ];
15 -> 8 [ label = "x", color = "black" ];
15 -> 9 [ label = "(", color = "black" ];
21 -> 11 [label="up"];
21 -> 6 [style=dotted, label="down"];
}
current node:  CONFIGURATION: [S_0] from []
transitions:
-- by "x" to [21 (normal)
-- by "+" to [0 (error)
-- by "*" to [0 (error)
-- by "(" to [4 (normal)
-- by ")" to [0 (error)
-- by ";" to [0 (error)
res:  
find path from: CONFIGURATION: [S_0] from []
transitions:
-- by "x" to [21 (normal)
-- by "+" to [0 (error)
-- by "*" to [0 (error)
-- by "(" to [4 (normal)
-- by ")" to [0 (error)
-- by ";" to [0 (error)
pop:  CONFIGURATION: [S_0] from []
transitions:
-- by "x" to [21 (normal)
-- by "+" to [0 (error)
-- by "*" to [0 (error)
-- by "(" to [4 (normal)
-- by ")" to [0 (error)
-- by ";" to [0 (error)
null
check transition by  x
not visited, target found
LET NODE for:
CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [7 (error)
-- by "*" to [7 (error)
-- by "(" to [7 (error)
-- by ")" to [7 (error)
-- by ";" to [7 (normal)
current node:  LET NODE for:
CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [7 (error)
-- by "*" to [7 (error)
-- by "(" to [7 (error)
-- by ")" to [7 (error)
-- by ";" to [7 (normal)
res:  x
current node:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [6 (normal)
res:  x
find path from: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [6 (normal)
pop:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [6 (normal)
null
check transition by  +
not visited, target found
CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [12 (error)
-- by "(" to [5 (normal)
CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [12 (error)
-- by "(" to [5 (normal)
current node:  CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [12 (error)
-- by "(" to [5 (normal)
res:  x +
find path from: CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [12 (error)
-- by "(" to [5 (normal)
pop:  CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [12 (error)
-- by "(" to [5 (normal)
null
check transition by  x
not visited, target found
CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [6 (normal)
current node:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [6 (normal)
res:  x + x
find path from: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [6 (normal)
pop:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [6 (normal)
null
check transition by  +
visited, push:  CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [12 (error)
-- by "(" to [5 (normal)
null
check transition by  *
not visited, target found
CONFIGURATION: [F_0, T1_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [13 (error)
-- by "(" to [5 (normal)
current node:  CONFIGURATION: [F_0, T1_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [13 (error)
-- by "(" to [5 (normal)
res:  x + x *
find path from: CONFIGURATION: [F_0, T1_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [13 (error)
-- by "(" to [5 (normal)
pop:  CONFIGURATION: [F_0, T1_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [13 (error)
-- by "(" to [5 (normal)
null
check transition by  x
not visited, target found
CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [6 (normal)
current node:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [6 (normal)
res:  x + x * x
find path from: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [6 (normal)
pop:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [6 (normal)
null
check transition by  +
visited, push:  CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [12 (error)
-- by "(" to [5 (normal)
null
check transition by  *
visited, push:  CONFIGURATION: [F_0, T1_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [13 (error)
-- by "(" to [5 (normal)
null
check transition by  
(check epsilon transitions)
current node:  CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [7 (error)
-- by "*" to [7 (error)
-- by "(" to [7 (error)
-- by ")" to [7 (error)
-- by ";" to [7 (normal)
res:  x + x * x 
find path from: CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [7 (error)
-- by "*" to [7 (error)
-- by "(" to [7 (error)
-- by ")" to [7 (error)
-- by ";" to [7 (normal)
pop:  CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [7 (error)
-- by "*" to [7 (error)
-- by "(" to [7 (error)
-- by ")" to [7 (error)
-- by ";" to [7 (normal)
null
check transition by  ;
not visited, target found
current node:  CONFIGURATION: [] from [<;>]
transitions:
-- by "null" to [6 (normal)
res:  x + x * x  ;
NEW TEST:  x + x * x ;
digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [S_0]"];
5 [label="5 - [E_0,<)>,T1_0,E1_0]"];
6 [label="6 - [<;>]"];
8 [label="8 - [T1_0,E1_0,<)>,T1_0,E1_0]"];
10 [label="10 - [<)>,T1_0,E1_0]"];
12 [label="12 - [T_0,E1_0]"];
13 [label="13 - [F_0,T1_0,E1_0]"];
14 [label="14 - [T_0,E1_0,<)>,T1_0,E1_0]"];
15 [label="15 - [F_0,T1_0,E1_0,<)>,T1_0,E1_0]"];
node [shape = square];
4 [label="let: [E_0,<)>,T1_0,E1_0,<)>,T1_0,E1_0,<;>]"];
9 [label="let: [E_0,<)>,T1_0,E1_0,<)>,T1_0,E1_0]"];
21 [label="let: [T1_0,E1_0,<)>,T1_0,E1_0,<;>]"];
node [shape = doublecircle];
7 [label="7 - []"];
11 [label="11 - [T1_0,E1_0]"];
0 -> 21 [ label = "x", color = "green" ];
0 -> 4 [ label = "(", color = "black" ];
5 -> 8 [ label = "x", color = "black" ];
5 -> 9 [ label = "(", color = "black" ];
6 -> 7 [ label = ";", color = "green" ];
4 -> 5 [label="up"];
4 -> 6 [style=dotted, label="down"];
8 -> 14 [ label = "+", color = "black" ];
8 -> 15 [ label = "*", color = "black" ];
8 -> 11 [ label = ")", color = "black" ];
10 -> 11 [ label = ")", color = "black" ];
9 -> 5 [label="up"];
9 -> 10 [style=dotted, label="down"];
11 -> 12 [ label = "+", color = "green" ];
11 -> 13 [ label = "*", color = "green" ];
12 -> 11 [ label = "x", color = "green" ];
12 -> 5 [ label = "(", color = "black" ];
13 -> 11 [ label = "x", color = "green" ];
13 -> 5 [ label = "(", color = "black" ];
14 -> 8 [ label = "x", color = "black" ];
14 -> 9 [ label = "(", color = "black" ];
15 -> 8 [ label = "x", color = "black" ];
15 -> 9 [ label = "(", color = "black" ];
21 -> 11 [label="up"];
21 -> 6 [style=dotted, label="down"];
}
current node:  CONFIGURATION: [S_0] from []
transitions:
-- by "x" to [21 (normal)
-- by "+" to [0 (error)
-- by "*" to [0 (error)
-- by "(" to [4 (normal)
-- by ")" to [0 (error)
-- by ";" to [0 (error)
res:  
find path from: CONFIGURATION: [S_0] from []
transitions:
-- by "x" to [21 (normal)
-- by "+" to [0 (error)
-- by "*" to [0 (error)
-- by "(" to [4 (normal)
-- by ")" to [0 (error)
-- by ";" to [0 (error)
pop:  CONFIGURATION: [S_0] from []
transitions:
-- by "x" to [21 (normal)
-- by "+" to [0 (error)
-- by "*" to [0 (error)
-- by "(" to [4 (normal)
-- by ")" to [0 (error)
-- by ";" to [0 (error)
null
check transition by  x
visited, push:  LET NODE for:
CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [7 (error)
-- by "*" to [7 (error)
-- by "(" to [7 (error)
-- by ")" to [7 (error)
-- by ";" to [7 (normal)
null
check transition by  (
not visited, target found
current node:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [7 (error)
-- by "*" to [7 (error)
-- by "(" to [7 (error)
-- by ")" to [7 (error)
-- by ";" to [7 (normal)
res:  (
current node:  CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
res:  (
find path from: CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  x
not visited, target found
CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
current node:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
res:  ( x
find path from: CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  +
not visited, target found
CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [14 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [14 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
current node:  CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [14 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
res:  ( x +
find path from: CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [14 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [14 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  x
not visited, target found
CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
current node:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
res:  ( x + x
find path from: CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  +
visited, push:  CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [14 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  *
not visited, target found
CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [15 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
current node:  CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [15 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
res:  ( x + x *
find path from: CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [15 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [15 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  x
not visited, target found
CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
current node:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
res:  ( x + x * x
find path from: CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  +
visited, push:  CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [14 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  *
visited, push:  CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [15 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  )
not visited, target found
current node:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [6 (normal)
res:  ( x + x * x )
find path from: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [6 (normal)
pop:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [6 (normal)
null
check transition by  +
visited, push:  CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [12 (error)
-- by "(" to [5 (normal)
null
check transition by  *
visited, push:  CONFIGURATION: [F_0, T1_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [13 (error)
-- by "(" to [5 (normal)
null
check transition by  
(check epsilon transitions)
current node:  CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [7 (error)
-- by "*" to [7 (error)
-- by "(" to [7 (error)
-- by ")" to [7 (error)
-- by ";" to [7 (normal)
res:  ( x + x * x ) 
find path from: CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [7 (error)
-- by "*" to [7 (error)
-- by "(" to [7 (error)
-- by ")" to [7 (error)
-- by ";" to [7 (normal)
pop:  CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [7 (error)
-- by "*" to [7 (error)
-- by "(" to [7 (error)
-- by ")" to [7 (error)
-- by ";" to [7 (normal)
null
check transition by  ;
visited, push:  CONFIGURATION: [] from [<;>]
transitions:
-- by "null" to [6 (normal)
pop:  CONFIGURATION: [] from [<;>]
transitions:
-- by "null" to [6 (normal)
null
check transition by  
(check epsilon transitions)
find final node from: CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [7 (error)
-- by "*" to [7 (error)
-- by "(" to [7 (error)
-- by ")" to [7 (error)
-- by ";" to [7 (normal)
pop:  CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [7 (error)
-- by "*" to [7 (error)
-- by "(" to [7 (error)
-- by ")" to [7 (error)
-- by ";" to [7 (normal)
check transition by  ;
final found
current node:  CONFIGURATION: [] from [<;>]
transitions:
-- by "null" to [6 (normal)
res:  ( x + x * x )  ;
NEW TEST:  ( x + x * x ) ;
digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [S_0]"];
5 [label="5 - [E_0,<)>,T1_0,E1_0]"];
6 [label="6 - [<;>]"];
8 [label="8 - [T1_0,E1_0,<)>,T1_0,E1_0]"];
10 [label="10 - [<)>,T1_0,E1_0]"];
12 [label="12 - [T_0,E1_0]"];
13 [label="13 - [F_0,T1_0,E1_0]"];
14 [label="14 - [T_0,E1_0,<)>,T1_0,E1_0]"];
15 [label="15 - [F_0,T1_0,E1_0,<)>,T1_0,E1_0]"];
node [shape = square];
4 [label="let: [E_0,<)>,T1_0,E1_0,<)>,T1_0,E1_0,<;>]"];
9 [label="let: [E_0,<)>,T1_0,E1_0,<)>,T1_0,E1_0]"];
21 [label="let: [T1_0,E1_0,<)>,T1_0,E1_0,<;>]"];
node [shape = doublecircle];
7 [label="7 - []"];
11 [label="11 - [T1_0,E1_0]"];
0 -> 21 [ label = "x", color = "green" ];
0 -> 4 [ label = "(", color = "green" ];
5 -> 8 [ label = "x", color = "green" ];
5 -> 9 [ label = "(", color = "black" ];
6 -> 7 [ label = ";", color = "green" ];
4 -> 5 [label="up"];
4 -> 6 [style=dotted, label="down"];
8 -> 14 [ label = "+", color = "green" ];
8 -> 15 [ label = "*", color = "green" ];
8 -> 11 [ label = ")", color = "green" ];
10 -> 11 [ label = ")", color = "black" ];
9 -> 5 [label="up"];
9 -> 10 [style=dotted, label="down"];
11 -> 12 [ label = "+", color = "green" ];
11 -> 13 [ label = "*", color = "green" ];
12 -> 11 [ label = "x", color = "green" ];
12 -> 5 [ label = "(", color = "black" ];
13 -> 11 [ label = "x", color = "green" ];
13 -> 5 [ label = "(", color = "black" ];
14 -> 8 [ label = "x", color = "green" ];
14 -> 9 [ label = "(", color = "black" ];
15 -> 8 [ label = "x", color = "green" ];
15 -> 9 [ label = "(", color = "black" ];
21 -> 11 [label="up"];
21 -> 6 [style=dotted, label="down"];
}
current node:  CONFIGURATION: [S_0] from []
transitions:
-- by "x" to [21 (normal)
-- by "+" to [0 (error)
-- by "*" to [0 (error)
-- by "(" to [4 (normal)
-- by ")" to [0 (error)
-- by ";" to [0 (error)
res:  
find path from: CONFIGURATION: [S_0] from []
transitions:
-- by "x" to [21 (normal)
-- by "+" to [0 (error)
-- by "*" to [0 (error)
-- by "(" to [4 (normal)
-- by ")" to [0 (error)
-- by ";" to [0 (error)
pop:  CONFIGURATION: [S_0] from []
transitions:
-- by "x" to [21 (normal)
-- by "+" to [0 (error)
-- by "*" to [0 (error)
-- by "(" to [4 (normal)
-- by ")" to [0 (error)
-- by ";" to [0 (error)
null
check transition by  x
visited, push:  LET NODE for:
CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [7 (error)
-- by "*" to [7 (error)
-- by "(" to [7 (error)
-- by ")" to [7 (error)
-- by ";" to [7 (normal)
null
check transition by  (
visited, push:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [7 (error)
-- by "*" to [7 (error)
-- by "(" to [7 (error)
-- by ")" to [7 (error)
-- by ";" to [7 (normal)
pop:  LET NODE for:
CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [7 (error)
-- by "*" to [7 (error)
-- by "(" to [7 (error)
-- by ")" to [7 (error)
-- by ";" to [7 (normal)
pop:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<;>] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [7 (error)
-- by "+" to [7 (error)
-- by "*" to [7 (error)
-- by "(" to [7 (error)
-- by ")" to [7 (error)
-- by ";" to [7 (normal)
pop:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
null
check transition by  +
visited, push:  CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [12 (error)
-- by "(" to [5 (normal)
null
check transition by  *
visited, push:  CONFIGURATION: [F_0, T1_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [13 (error)
-- by "(" to [5 (normal)
pop:  CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  x
visited, push:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  (
not visited, target found
current node:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
res:  ( (
current node:  CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
res:  ( (
find path from: CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  x
visited, push:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  (
visited, push:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  +
visited, push:  CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [14 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  *
visited, push:  CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [15 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  )
visited, push:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [10 (normal)
pop:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [14 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  x
visited, push:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  (
not visited, target found
current node:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
res:  ( ( x + (
current node:  CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
res:  ( ( x + (
find path from: CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  x
visited, push:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  (
visited, push:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  +
visited, push:  CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [14 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  *
visited, push:  CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [15 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  )
visited, push:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [10 (normal),by "null" to [10 (normal)
pop:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [14 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  x
visited, push:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  (
visited, push:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [15 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  x
visited, push:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  (
not visited, target found
current node:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
res:  ( ( x + ( x * (
current node:  CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
res:  ( ( x + ( x * (
find path from: CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  x
visited, push:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  (
visited, push:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  +
visited, push:  CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [14 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  *
visited, push:  CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [15 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  )
visited, push:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [10 (normal),by "null" to [10 (normal),by "null" to [10 (normal)
pop:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [14 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  x
visited, push:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  (
visited, push:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [15 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  x
visited, push:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  (
visited, push:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [10 (normal),by "null" to [10 (normal),by "null" to [10 (normal)
null
check transition by  +
visited, push:  CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [12 (error)
-- by "(" to [5 (normal)
null
check transition by  *
visited, push:  CONFIGURATION: [F_0, T1_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [13 (error)
-- by "(" to [5 (normal)
null
check transition by  
(check epsilon transitions)
current node:  CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
res:  ( ( x + ( x * ( x ) 
find path from: CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  )
not visited, target found
current node:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [10 (normal),by "null" to [10 (normal),by "null" to [10 (normal)
res:  ( ( x + ( x * ( x )  )
find path from: CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [10 (normal),by "null" to [10 (normal),by "null" to [10 (normal)
pop:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [10 (normal),by "null" to [10 (normal),by "null" to [10 (normal)
null
check transition by  +
visited, push:  CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [12 (error)
-- by "(" to [5 (normal)
null
check transition by  *
visited, push:  CONFIGURATION: [F_0, T1_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [13 (error)
-- by "(" to [5 (normal)
null
check transition by  
(check epsilon transitions)
current node:  CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
res:  ( ( x + ( x * ( x )  ) 
find path from: CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  )
visited, push:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [10 (normal),by "null" to [10 (normal),by "null" to [10 (normal)
pop:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [10 (normal),by "null" to [10 (normal),by "null" to [10 (normal)
null
check transition by  +
visited, push:  CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [12 (error)
-- by "(" to [5 (normal)
null
check transition by  *
visited, push:  CONFIGURATION: [F_0, T1_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [13 (error)
-- by "(" to [5 (normal)
null
check transition by  
(check epsilon transitions)
current node:  CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
res:  ( ( x + ( x * ( x )  )  ) 
find path from: CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  )
visited, push:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [10 (normal),by "null" to [10 (normal),by "null" to [10 (normal)
pop:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [10 (normal),by "null" to [10 (normal),by "null" to [10 (normal)
null
check transition by  +
visited, push:  CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [12 (error)
-- by "(" to [5 (normal)
null
check transition by  *
visited, push:  CONFIGURATION: [F_0, T1_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [13 (error)
-- by "(" to [5 (normal)
null
check transition by  
(check epsilon transitions)
pop:  CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [12 (error)
-- by "(" to [5 (normal)
null
check transition by  x
visited, push:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [10 (normal),by "null" to [10 (normal),by "null" to [10 (normal)
null
check transition by  (
not visited, target found
current node:  CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
res:  ( ( x + ( x * ( x )  )  )  ) + (
find path from: CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  x
visited, push:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  (
visited, push:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  +
visited, push:  CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [14 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  *
visited, push:  CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [15 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  )
visited, push:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [10 (normal),by "null" to [10 (normal),by "null" to [10 (normal)
pop:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [14 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  x
visited, push:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  (
visited, push:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [15 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  x
visited, push:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  (
visited, push:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [10 (normal),by "null" to [10 (normal),by "null" to [10 (normal)
null
check transition by  +
visited, push:  CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [12 (error)
-- by "(" to [5 (normal)
null
check transition by  *
visited, push:  CONFIGURATION: [F_0, T1_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [13 (error)
-- by "(" to [5 (normal)
null
check transition by  
(check epsilon transitions)
pop:  CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  x
visited, push:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  (
visited, push:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  +
visited, push:  CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [14 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  *
visited, push:  CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [15 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  )
visited, push:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [10 (normal),by "null" to [10 (normal),by "null" to [10 (normal)
pop:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
null
check transition by  +
visited, push:  CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [14 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  *
visited, push:  CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [15 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
null
check transition by  )
visited, push:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [10 (normal),by "null" to [10 (normal),by "null" to [10 (normal)
pop:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [T_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [12 (error)
-- by "(" to [5 (normal)
null
check transition by  x
visited, push:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [10 (normal),by "null" to [10 (normal),by "null" to [10 (normal)
null
check transition by  (
visited, push:  CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [F_0, T1_0, E1_0] from [T1_0, E1_0]
transitions:
-- by "x" to [11 (normal)
-- by "+" to [12 (error)
-- by "*" to [13 (error)
-- by "(" to [5 (normal)
null
check transition by  x
visited, push:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [10 (normal),by "null" to [10 (normal),by "null" to [10 (normal)
null
check transition by  (
not visited, target found
current node:  CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
res:  ( ( x + ( x * ( x )  )  )  ) + ( x ) * (
find final node from: CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
check transition by  x
is not final, push:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
check transition by  (
is not final, push:  LET NODE for:
CONFIGURATION: [E_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0, <;>]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [5 (error)
-- by "*" to [5 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
CONFIGURATION: [<)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [11 (error)
-- by "*" to [11 (error)
-- by "(" to [11 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
pop:  CONFIGURATION: [T1_0, E1_0, <)>, T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (error)
-- by "+" to [14 (normal)
-- by "*" to [15 (normal)
-- by "(" to [8 (error)
-- by ")" to [11 (normal)
-- by ";" to [11 (error)
check transition by  +
is not final, push:  CONFIGURATION: [T_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [14 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
check transition by  *
is not final, push:  CONFIGURATION: [F_0, T1_0, E1_0, <)>, T1_0, E1_0] from [T1_0, E1_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [8 (normal)
-- by "+" to [14 (error)
-- by "*" to [15 (error)
-- by "(" to [9 (normal)
-- by ")" to [11 (error)
-- by ";" to [11 (error)
check transition by  )
final found
current node:  CONFIGURATION: [T1_0, E1_0] from [E_0, <)>, T1_0, E1_0]
transitions:
-- by "x" to [11 (error)
-- by "+" to [12 (normal)
-- by "*" to [13 (normal)
-- by "(" to [11 (error)
-- by "null" to [10 (normal),by "null" to [10 (normal),by "null" to [10 (normal)
res:  ( ( x + ( x * ( x )  )  )  ) + ( x ) * ( x )
NEW TEST:  ( ( x + ( x * ( x ) ) ) ) + ( x ) * ( x )
digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [S_0]"];
5 [label="5 - [E_0,<)>,T1_0,E1_0]"];
6 [label="6 - [<;>]"];
8 [label="8 - [T1_0,E1_0,<)>,T1_0,E1_0]"];
10 [label="10 - [<)>,T1_0,E1_0]"];
12 [label="12 - [T_0,E1_0]"];
13 [label="13 - [F_0,T1_0,E1_0]"];
14 [label="14 - [T_0,E1_0,<)>,T1_0,E1_0]"];
15 [label="15 - [F_0,T1_0,E1_0,<)>,T1_0,E1_0]"];
node [shape = square];
4 [label="let: [E_0,<)>,T1_0,E1_0,<)>,T1_0,E1_0,<;>]"];
9 [label="let: [E_0,<)>,T1_0,E1_0,<)>,T1_0,E1_0]"];
21 [label="let: [T1_0,E1_0,<)>,T1_0,E1_0,<;>]"];
node [shape = doublecircle];
7 [label="7 - []"];
11 [label="11 - [T1_0,E1_0]"];
0 -> 21 [ label = "x", color = "green" ];
0 -> 4 [ label = "(", color = "green" ];
5 -> 8 [ label = "x", color = "green" ];
5 -> 9 [ label = "(", color = "green" ];
6 -> 7 [ label = ";", color = "green" ];
4 -> 5 [label="up"];
4 -> 6 [style=dotted, label="down"];
8 -> 14 [ label = "+", color = "green" ];
8 -> 15 [ label = "*", color = "green" ];
8 -> 11 [ label = ")", color = "green" ];
10 -> 11 [ label = ")", color = "green" ];
9 -> 5 [label="up"];
9 -> 10 [style=dotted, label="down"];
11 -> 12 [ label = "+", color = "green" ];
11 -> 13 [ label = "*", color = "green" ];
12 -> 11 [ label = "x", color = "green" ];
12 -> 5 [ label = "(", color = "green" ];
13 -> 11 [ label = "x", color = "green" ];
13 -> 5 [ label = "(", color = "green" ];
14 -> 8 [ label = "x", color = "green" ];
14 -> 9 [ label = "(", color = "green" ];
15 -> 8 [ label = "x", color = "green" ];
15 -> 9 [ label = "(", color = "green" ];
21 -> 11 [label="up"];
21 -> 6 [style=dotted, label="down"];
}
