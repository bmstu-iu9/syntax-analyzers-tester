with recover rules:  {
 "follow": {
  "E_0": [
   ")",
   "$"
  ],
  "T1_1": [
   "+",
   ")",
   "$"
  ],
  "F_0": [
   "+",
   "*",
   ")",
   "$"
  ],
  "F_1": [
   "+",
   "*",
   ")",
   "$"
  ],
  "T_0": [
   ")",
   "+",
   "$"
  ],
  "E1_0": [
   ")",
   "$"
  ],
  "T1_0": [
   "+",
   ")",
   "$"
  ],
  "E1_1": [
   ")",
   "$"
  ]
 },
 "terminals": [
  "x",
  "+",
  "*",
  "(",
  ")",
  "$"
 ],
 "table": {
  "E_0": {
   "$": null,
   ")": null,
   "(": [
    "T_0",
    "E1_0"
   ],
   "+": null,
   "*": null,
   "x": [
    "T_0",
    "E1_0"
   ]
  },
  "T1_1": {
   "$": [],
   ")": [],
   "(": null,
   "+": [],
   "*": [
    "<*>",
    "F_0",
    "T1_0"
   ],
   "x": null
  },
  "F_0": {
   "$": null,
   ")": null,
   "(": [
    "F_1"
   ],
   "+": null,
   "*": null,
   "x": [
    "F_1"
   ]
  },
  "F_1": {
   "$": null,
   ")": null,
   "(": [
    "<(>",
    "E_0",
    "<)>"
   ],
   "+": null,
   "*": null,
   "x": [
    "<x>"
   ]
  },
  "T_0": {
   "$": null,
   ")": null,
   "(": [
    "F_0",
    "T1_0"
   ],
   "+": null,
   "*": null,
   "x": [
    "F_0",
    "T1_0"
   ]
  },
  "E1_0": {
   "$": [
    "E1_1"
   ],
   ")": [
    "E1_1"
   ],
   "(": null,
   "+": [
    "E1_1"
   ],
   "*": null,
   "x": null
  },
  "T1_0": {
   "$": [
    "T1_1"
   ],
   ")": [
    "T1_1"
   ],
   "(": null,
   "+": [
    "T1_1"
   ],
   "*": [
    "T1_1"
   ],
   "x": null
  },
  "E1_1": {
   "$": [],
   ")": [],
   "(": null,
   "+": [
    "<+>",
    "T_0",
    "E1_0"
   ],
   "*": null,
   "x": null
  },
  "<x>": {
   "x": [
    "x"
   ],
   "+": null,
   "*": null,
   "(": null,
   ")": null,
   "$": null
  },
  "<+>": {
   "x": null,
   "+": [
    "+"
   ],
   "*": null,
   "(": null,
   ")": null,
   "$": null
  },
  "<*>": {
   "x": null,
   "+": null,
   "*": [
    "*"
   ],
   "(": null,
   ")": null,
   "$": null
  },
  "<(>": {
   "x": null,
   "+": null,
   "*": null,
   "(": [
    "("
   ],
   ")": null,
   "$": null
  },
  "<)>": {
   "x": null,
   "+": null,
   "*": null,
   "(": null,
   ")": [
    ")"
   ],
   "$": null
  },
  "<$>": {
   "x": null,
   "+": null,
   "*": null,
   "(": null,
   ")": null,
   "$": []
  }
 },
 "axiom": "E_0",
 "first": {
  "E_0": [
   "x",
   "("
  ],
  "T1_1": [
   "eps",
   "*"
  ],
  "F_0": [
   "x",
   "("
  ],
  "F_1": [
   "x",
   "("
  ],
  "T_0": [
   "x",
   "("
  ],
  "E1_0": [
   "+",
   "eps"
  ],
  "T1_0": [
   "eps",
   "*"
  ],
  "E1_1": [
   "+",
   "eps"
  ]
 },
 "recover": {
  "E_0": {
   "$": [],
   ")": [],
   "(": null,
   "+": [
    "+",
    "E_0"
   ],
   "*": [
    "*",
    "E_0"
   ],
   "x": null
  },
  "T1_1": {
   "$": null,
   ")": null,
   "(": [
    "(",
    "T1_1"
   ],
   "+": null,
   "*": null,
   "x": [
    "x",
    "T1_1"
   ]
  },
  "F_0": {
   "$": [],
   ")": [],
   "(": null,
   "+": [],
   "*": [],
   "x": null
  },
  "F_1": {
   "$": [],
   ")": [],
   "(": null,
   "+": [],
   "*": [],
   "x": null
  },
  "T_0": {
   "$": [],
   ")": [],
   "(": null,
   "+": [],
   "*": [
    "*",
    "T_0"
   ],
   "x": null
  },
  "E1_0": {
   "$": null,
   ")": null,
   "(": [
    "(",
    "E1_0"
   ],
   "+": null,
   "*": [
    "*",
    "E1_0"
   ],
   "x": [
    "x",
    "E1_0"
   ]
  },
  "T1_0": {
   "$": null,
   ")": null,
   "(": [
    "(",
    "T1_0"
   ],
   "+": null,
   "*": null,
   "x": [
    "x",
    "T1_0"
   ]
  },
  "E1_1": {
   "$": null,
   ")": null,
   "(": [
    "(",
    "E1_1"
   ],
   "+": null,
   "*": [
    "*",
    "E1_1"
   ],
   "x": [
    "x",
    "E1_1"
   ]
  },
  "<x>": {
   "x": null,
   "+": [
    "+"
   ],
   "*": [
    "*"
   ],
   "(": [
    "("
   ],
   ")": [
    ")"
   ],
   "$": []
  },
  "<+>": {
   "x": [
    "x"
   ],
   "+": null,
   "*": [
    "*"
   ],
   "(": [
    "("
   ],
   ")": [
    ")"
   ],
   "$": []
  },
  "<*>": {
   "x": [
    "x"
   ],
   "+": [
    "+"
   ],
   "*": null,
   "(": [
    "("
   ],
   ")": [
    ")"
   ],
   "$": []
  },
  "<(>": {
   "x": [
    "x"
   ],
   "+": [
    "+"
   ],
   "*": [
    "*"
   ],
   "(": null,
   ")": [
    ")"
   ],
   "$": []
  },
  "<)>": {
   "x": [
    "x"
   ],
   "+": [
    "+"
   ],
   "*": [
    "*"
   ],
   "(": [
    "("
   ],
   ")": null,
   "$": []
  },
  "<$>": {
   "x": [
    "x"
   ],
   "+": [
    "+"
   ],
   "*": [
    "*"
   ],
   "(": [
    "("
   ],
   ")": [
    ")"
   ],
   "$": null
  }
 }
}
Создание графа конфигураций...
---------------
 CURRENT NODE: CONFIGURATION: [E_0] from []
[ 'E_0' ] 'x'
[ 'E1_0', 'T_0' ] 'x'
[ 'E1_0', 'T1_0', 'F_0' ] 'x'
[ 'E1_0', 'T1_0', 'F_1' ] 'x'
[ 'E1_0', 'T1_0', '<x>' ] 'x'
[ 'E1_0', 'T1_0', 'x' ] 'x'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL x: E1_0,T1_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'E1_0', 'T1_0' ]
>   COMPARE:  [ 'E1_0', 'T1_0' ] [ 'E_0' ] 0
>   COMPARE:  [ 'E1_0', 'T1_0' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION: [E1_0, T1_0] from [E_0]
[ 'E_0' ] '+'
[ 'E_0', '+' ] '+'
IS FINAL NODE:  [ 'E_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: E_0
=> ERROR: true
-- CREATED CYCLE: E_0
-- FROM: CONFIGURATION: [E_0] from []
-- TO: CONFIGURATION: [E_0] from []
-- by terminal: +
[ 'E_0' ] '*'
[ 'E_0', '*' ] '*'
IS FINAL NODE:  [ 'E_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: E_0
=> ERROR: true
-- CREATED CYCLE: E_0
-- FROM: CONFIGURATION: [E_0] from []
-- TO: CONFIGURATION: [E_0] from []
-- by terminal: *
[ 'E_0' ] '('
[ 'E1_0', 'T_0' ] '('
[ 'E1_0', 'T1_0', 'F_0' ] '('
[ 'E1_0', 'T1_0', 'F_1' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E_0', '<(>' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E_0', '(' ] '('
IS FINAL NODE:  [ 'E1_0', 'T1_0', '<)>', 'E_0' ]
     res: false
=> CURRENT STACK BY TERMINAL (: E1_0,T1_0,<)>,E_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'E1_0', 'T1_0', '<)>', 'E_0' ]
>   COMPARE:  [ 'E1_0', 'T1_0', '<)>', 'E_0' ] [ 'E_0' ] 1
true
CREATED LET-NODE FOR A => A|B: E_0 => E1_0,T1_0,<)>,E_0
-- created new let-node and config
-- from E_0 by (
[ 'E_0' ] ')'
---------------
 CURRENT NODE: LET NODE for:
CONFIGURATION: [E_0] from []
CONFIGURATION: [E1_0, T1_0, <)>] from [E1_0, T1_0, <)>, E_0]
---------------
 CURRENT NODE: CONFIGURATION: [E1_0, T1_0, <)>] from [E1_0, T1_0, <)>, E_0]
[ 'E1_0', 'T1_0', '<)>' ] 'x'
[ 'E1_0', 'T1_0', 'x' ] 'x'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL x: E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [E1_0, T1_0, <)>] from [E1_0, T1_0, <)>, E_0]
-- TO: CONFIGURATION: [E1_0, T1_0] from [E_0]
-- by terminal: x
[ 'E1_0', 'T1_0', '<)>' ] '+'
[ 'E1_0', 'T1_0', '+' ] '+'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL +: E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [E1_0, T1_0, <)>] from [E1_0, T1_0, <)>, E_0]
-- TO: CONFIGURATION: [E1_0, T1_0] from [E_0]
-- by terminal: +
[ 'E1_0', 'T1_0', '<)>' ] '*'
[ 'E1_0', 'T1_0', '*' ] '*'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL *: E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [E1_0, T1_0, <)>] from [E1_0, T1_0, <)>, E_0]
-- TO: CONFIGURATION: [E1_0, T1_0] from [E_0]
-- by terminal: *
[ 'E1_0', 'T1_0', '<)>' ] '('
[ 'E1_0', 'T1_0', '(' ] '('
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL (: E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [E1_0, T1_0, <)>] from [E1_0, T1_0, <)>, E_0]
-- TO: CONFIGURATION: [E1_0, T1_0] from [E_0]
-- by terminal: (
[ 'E1_0', 'T1_0', '<)>' ] ')'
[ 'E1_0', 'T1_0', ')' ] ')'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL ): E1_0,T1_0
=> ERROR: false
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [E1_0, T1_0, <)>] from [E1_0, T1_0, <)>, E_0]
-- TO: CONFIGURATION: [E1_0, T1_0] from [E_0]
-- by terminal: )
---------------
 CURRENT NODE: CONFIGURATION: [E1_0, T1_0] from [E_0]
[ 'E1_0', 'T1_0' ] 'x'
[ 'E1_0', 'T1_0', 'x' ] 'x'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL x: E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [E1_0, T1_0] from [E_0]
-- TO: CONFIGURATION: [E1_0, T1_0] from [E_0]
-- by terminal: x
[ 'E1_0', 'T1_0' ] '+'
[ 'E1_0', 'T1_1' ] '+'
[ 'E1_0' ] '+'
[ 'E1_1' ] '+'
[ 'E1_0', 'T_0', '<+>' ] '+'
[ 'E1_0', 'T_0', '+' ] '+'
IS FINAL NODE:  [ 'E1_0', 'T_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: E1_0,T_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'E1_0', 'T_0' ]
>   COMPARE:  [ 'E1_0', 'T_0' ] [ 'E_0' ] 0
>   COMPARE:  [ 'E1_0', 'T_0' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION: [E1_0, T_0] from [E1_0, T1_0]
[ 'E1_0', 'T1_0' ] '*'
[ 'E1_0', 'T1_1' ] '*'
[ 'E1_0', 'T1_0', 'F_0', '<*>' ] '*'
[ 'E1_0', 'T1_0', 'F_0', '*' ] '*'
IS FINAL NODE:  [ 'E1_0', 'T1_0', 'F_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: E1_0,T1_0,F_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'E1_0', 'T1_0', 'F_0' ]
>   COMPARE:  [ 'E1_0', 'T1_0', 'F_0' ] [ 'E1_0', 'T1_0' ] 0
>   COMPARE:  [ 'E1_0', 'T1_0', 'F_0' ] [ 'E_0' ] 0
>   COMPARE:  [ 'E1_0', 'T1_0', 'F_0' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION: [E1_0, T1_0, F_0] from [E1_0, T1_0]
[ 'E1_0', 'T1_0' ] '('
[ 'E1_0', 'T1_0', '(' ] '('
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL (: E1_0,T1_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [E1_0, T1_0] from [E_0]
-- TO: CONFIGURATION: [E1_0, T1_0] from [E_0]
-- by terminal: (
[ 'E1_0', 'T1_0' ] ')'
[ 'E1_0', 'T1_1' ] ')'
[ 'E1_0' ] ')'
[ 'E1_1' ] ')'
---------------
 CURRENT NODE: CONFIGURATION: [E1_0, T1_0, F_0] from [E1_0, T1_0]
[ 'E1_0', 'T1_0', 'F_0' ] 'x'
[ 'E1_0', 'T1_0', 'F_1' ] 'x'
[ 'E1_0', 'T1_0', '<x>' ] 'x'
[ 'E1_0', 'T1_0', 'x' ] 'x'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL x: E1_0,T1_0
=> ERROR: false
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [E1_0, T1_0, F_0] from [E1_0, T1_0]
-- TO: CONFIGURATION: [E1_0, T1_0] from [E_0]
-- by terminal: x
[ 'E1_0', 'T1_0', 'F_0' ] '+'
[ 'E1_0', 'T1_0' ] '+'
[ 'E1_0', 'T1_1' ] '+'
[ 'E1_0' ] '+'
[ 'E1_1' ] '+'
[ 'E1_0', 'T_0', '<+>' ] '+'
[ 'E1_0', 'T_0', '+' ] '+'
IS FINAL NODE:  [ 'E1_0', 'T_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: E1_0,T_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T_0
-- FROM: CONFIGURATION: [E1_0, T1_0, F_0] from [E1_0, T1_0]
-- TO: CONFIGURATION: [E1_0, T_0] from [E1_0, T1_0]
-- by terminal: +
[ 'E1_0', 'T1_0', 'F_0' ] '*'
[ 'E1_0', 'T1_0' ] '*'
[ 'E1_0', 'T1_1' ] '*'
[ 'E1_0', 'T1_0', 'F_0', '<*>' ] '*'
[ 'E1_0', 'T1_0', 'F_0', '*' ] '*'
IS FINAL NODE:  [ 'E1_0', 'T1_0', 'F_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: E1_0,T1_0,F_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T1_0,F_0
-- FROM: CONFIGURATION: [E1_0, T1_0, F_0] from [E1_0, T1_0]
-- TO: CONFIGURATION: [E1_0, T1_0, F_0] from [E1_0, T1_0]
-- by terminal: *
[ 'E1_0', 'T1_0', 'F_0' ] '('
[ 'E1_0', 'T1_0', 'F_1' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E_0', '<(>' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E_0', '(' ] '('
IS FINAL NODE:  [ 'E1_0', 'T1_0', '<)>', 'E_0' ]
     res: false
=> CURRENT STACK BY TERMINAL (: E1_0,T1_0,<)>,E_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'E1_0', 'T1_0', '<)>', 'E_0' ]
>   COMPARE:  [ 'E1_0', 'T1_0', '<)>', 'E_0' ] [ 'E1_0', 'T1_0', 'F_0' ] 0
>   COMPARE:  [ 'E1_0', 'T1_0', '<)>', 'E_0' ] [ 'E1_0', 'T1_0' ] 0
>   COMPARE:  [ 'E1_0', 'T1_0', '<)>', 'E_0' ] [ 'E_0' ] 1
true
CREATED LET-NODE FOR A => A|B: E_0 => E1_0,T1_0,<)>,E_0
-- equal conf found
-- equal let-node found
[ 'E1_0', 'T1_0', 'F_0' ] ')'
[ 'E1_0', 'T1_0' ] ')'
[ 'E1_0', 'T1_1' ] ')'
[ 'E1_0' ] ')'
[ 'E1_1' ] ')'
---------------
 CURRENT NODE: CONFIGURATION: [E1_0, T_0] from [E1_0, T1_0]
[ 'E1_0', 'T_0' ] 'x'
[ 'E1_0', 'T1_0', 'F_0' ] 'x'
[ 'E1_0', 'T1_0', 'F_1' ] 'x'
[ 'E1_0', 'T1_0', '<x>' ] 'x'
[ 'E1_0', 'T1_0', 'x' ] 'x'
IS FINAL NODE:  [ 'E1_0', 'T1_0' ]
     res: true
=> CURRENT STACK BY TERMINAL x: E1_0,T1_0
=> ERROR: false
-- CREATED CYCLE: E1_0,T1_0
-- FROM: CONFIGURATION: [E1_0, T_0] from [E1_0, T1_0]
-- TO: CONFIGURATION: [E1_0, T1_0] from [E_0]
-- by terminal: x
[ 'E1_0', 'T_0' ] '+'
[ 'E1_0' ] '+'
[ 'E1_1' ] '+'
[ 'E1_0', 'T_0', '<+>' ] '+'
[ 'E1_0', 'T_0', '+' ] '+'
IS FINAL NODE:  [ 'E1_0', 'T_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: E1_0,T_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T_0
-- FROM: CONFIGURATION: [E1_0, T_0] from [E1_0, T1_0]
-- TO: CONFIGURATION: [E1_0, T_0] from [E1_0, T1_0]
-- by terminal: +
[ 'E1_0', 'T_0' ] '*'
[ 'E1_0', 'T_0', '*' ] '*'
IS FINAL NODE:  [ 'E1_0', 'T_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: E1_0,T_0
=> ERROR: true
-- CREATED CYCLE: E1_0,T_0
-- FROM: CONFIGURATION: [E1_0, T_0] from [E1_0, T1_0]
-- TO: CONFIGURATION: [E1_0, T_0] from [E1_0, T1_0]
-- by terminal: *
[ 'E1_0', 'T_0' ] '('
[ 'E1_0', 'T1_0', 'F_0' ] '('
[ 'E1_0', 'T1_0', 'F_1' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E_0', '<(>' ] '('
[ 'E1_0', 'T1_0', '<)>', 'E_0', '(' ] '('
IS FINAL NODE:  [ 'E1_0', 'T1_0', '<)>', 'E_0' ]
     res: false
=> CURRENT STACK BY TERMINAL (: E1_0,T1_0,<)>,E_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'E1_0', 'T1_0', '<)>', 'E_0' ]
>   COMPARE:  [ 'E1_0', 'T1_0', '<)>', 'E_0' ] [ 'E1_0', 'T_0' ] 0
>   COMPARE:  [ 'E1_0', 'T1_0', '<)>', 'E_0' ] [ 'E1_0', 'T1_0' ] 0
>   COMPARE:  [ 'E1_0', 'T1_0', '<)>', 'E_0' ] [ 'E_0' ] 1
true
CREATED LET-NODE FOR A => A|B: E_0 => E1_0,T1_0,<)>,E_0
-- equal conf found
-- equal let-node found
[ 'E1_0', 'T_0' ] ')'
[ 'E1_0' ] ')'
[ 'E1_1' ] ')'
[ '0 [label="0 - [E_0]"]',
  '3 [label="3 - [<)>,T1_0,E1_0]"]',
  '4 [label="4 - [T_0,E1_0]"]',
  '5 [label="5 - [F_0,T1_0,E1_0]"]' ]
digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [E_0]"];
3 [label="3 - [<)>,T1_0,E1_0]"];
4 [label="4 - [T_0,E1_0]"];
5 [label="5 - [F_0,T1_0,E1_0]"];
node [shape = square];
2 [label="let: [E_0,<)>,T1_0,E1_0]"];
node [shape = doublecircle];
1 [label="1 - [T1_0,E1_0]"];
0 -> 1 [ label = "x", color = "black" ];
0 -> 0 [ label = "+", color = "red" ];
0 -> 0 [ label = "*", color = "red" ];
0 -> 2 [ label = "(", color = "black" ];
1 -> 1 [ label = "x", color = "red" ];
1 -> 4 [ label = "+", color = "black" ];
1 -> 5 [ label = "*", color = "black" ];
1 -> 1 [ label = "(", color = "red" ];
3 -> 1 [ label = "x", color = "red" ];
3 -> 1 [ label = "+", color = "red" ];
3 -> 1 [ label = "*", color = "red" ];
3 -> 1 [ label = "(", color = "red" ];
3 -> 1 [ label = ")", color = "black" ];
2 -> 0;
2 -> 3 [style=dashed];
4 -> 1 [ label = "x", color = "black" ];
4 -> 4 [ label = "+", color = "red" ];
4 -> 4 [ label = "*", color = "red" ];
4 -> 2 [ label = "(", color = "black" ];
5 -> 1 [ label = "x", color = "black" ];
5 -> 4 [ label = "+", color = "red" ];
5 -> 5 [ label = "*", color = "red" ];
5 -> 2 [ label = "(", color = "black" ];
}
